#!/usr/bin/env slsh
% Find links that point to non-existent files
% Example:  find /usr -type d -exec badlinks '{}' \;
require ("cmdopt");

private variable
VERSION = "0.1",
  LICENSE = "GNU GPL version 3 or later";

private define print_version ()
{
   () = fprintf (stdout, "%s (version %s)\nLicense: %s\n", __argv[0], VERSION, LICENSE);
   exit (0);
}

private define print_usage ()
{
   () = fprintf (stdout, "Usage: %s [-h, --help] [--version] [dirs...]\n", __argv[0]);
   exit (0);
}

private define _stat_file (file)
{
   if (NULL == stat_file (file) && ENOENT == errno)
     {
	() = fprintf (stdout, "Broken link found: %s  %s\n", file, errno_string (errno));
#ifexists readlink
	() = fprintf (stdout, "%s: points to %s\n", file, readlink (file));
#endif
     }
}

private define warn ()
{
   variable args = __pop_args (_NARGS-1);
   variable err = ();
   variable msg;

   msg = sprintf (__push_args (args));

   if (err)
     err = ": " + errno_string (err);
   else
     err == "";

   () = fprintf (stderr, "%s: %s%s\n",
		 __argv[0], msg, err);
}

private define badlinks (dir)
{
   variable files = listdir (dir);

   if (files == NULL)
     {
	() = fprintf (stderr, "%s: %s\n", dir, errno_string (errno));
	return;
     }

   files = array_map (String_Type, &path_concat, dir, files);
   array_map (Void_Type, &_stat_file, files);
}

define slsh_main ()
{
   variable i, c = cmdopt_new ();

   c.add("h|help", &print_usage);
   c.add("version", &print_version);
   i = c.process (__argv, 1);

   variable dir = (i < __argc) ? __argv[[i:]] : ["."];
   array_map (Void_Type, &badlinks, dir);
   exit (0);
}
